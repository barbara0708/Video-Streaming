/**
 * @api.video/nodejs-client
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
/// <reference types="node" />
/// <reference types="node" />
import HttpClient from '../HttpClient';
import LiveStream from '../model/LiveStream';
import LiveStreamCreationPayload from '../model/LiveStreamCreationPayload';
import LiveStreamListResponse from '../model/LiveStreamListResponse';
import LiveStreamUpdatePayload from '../model/LiveStreamUpdatePayload';
import { Readable } from 'stream';
/**
 * no description
 */
export default class LiveStreamsApi {
    private httpClient;
    constructor(httpClient: HttpClient);
    /**
     * Creates a livestream object.
     * Create live stream
     * @param liveStreamCreationPayload
     */
    create(liveStreamCreationPayload: LiveStreamCreationPayload): Promise<LiveStream>;
    /**
     * Get a livestream by id.
     * Retrieve live stream
     * @param liveStreamId The unique ID for the live stream you want to watch.
     */
    get(liveStreamId: string): Promise<LiveStream>;
    /**
     * Updates the livestream object.
     * Update a live stream
     * @param liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
     * @param liveStreamUpdatePayload
     */
    update(liveStreamId: string, liveStreamUpdatePayload?: LiveStreamUpdatePayload): Promise<LiveStream>;
    /**
     * If you do not need a live stream any longer, you can send a request to delete it. All you need is the liveStreamId.
     * Delete a live stream
     * @param liveStreamId The unique ID for the live stream that you want to remove.
     */
    delete(liveStreamId: string): Promise<void>;
    /**
     * Get the list of livestreams on the workspace.
     * List all live streams
     * @param {Object} searchParams
     * @param { string } searchParams.streamKey The unique stream key that allows you to stream videos.
     * @param { string } searchParams.name You can filter live streams by their name or a part of their name.
     * @param { string } searchParams.sortBy Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format.
     * @param { &#39;asc&#39; | &#39;desc&#39; } searchParams.sortOrder Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.
     * @param { number } searchParams.currentPage Choose the number of search results to return per page. Minimum value: 1
     * @param { number } searchParams.pageSize Results per page. Allowed values 1-100, default is 25.
     */
    list({ streamKey, name, sortBy, sortOrder, currentPage, pageSize, }?: {
        streamKey?: string;
        name?: string;
        sortBy?: string;
        sortOrder?: 'asc' | 'desc';
        currentPage?: number;
        pageSize?: number;
    }): Promise<LiveStreamListResponse>;
    /**
     * Upload the thumbnail for the livestream.
     * Upload a thumbnail
     * @param liveStreamId The unique ID for the live stream you want to upload.
     * @param file The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.
     */
    uploadThumbnail(liveStreamId: string, file: string | Readable | Buffer): Promise<LiveStream>;
    /**
     * Send the unique identifier for a live stream to delete its thumbnail.
     * Delete a thumbnail
     * @param liveStreamId The unique identifier of the live stream whose thumbnail you want to delete.
     */
    deleteThumbnail(liveStreamId: string): Promise<LiveStream>;
}
