var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/Button.tsx
import * as React from "react";
import { VideoUploader } from "@api.video/video-uploader";
function UploadButton(_a) {
  var _b = _a, {
    children,
    uploadToken,
    style,
    onUploadError,
    onUploadProgress,
    onUploadSuccess
  } = _b, props = __objRest(_b, [
    "children",
    "uploadToken",
    "style",
    "onUploadError",
    "onUploadProgress",
    "onUploadSuccess"
  ]);
  const inputRef = React.useRef(null);
  const handleClick = () => {
    var _a2;
    return (_a2 = inputRef.current) == null ? void 0 : _a2.click();
  };
  const handleUpload = async (e) => {
    var _a2, _b2;
    if (!((_a2 = e.currentTarget) == null ? void 0 : _a2.files) || !e.currentTarget.files[0] || !uploadToken)
      return;
    try {
      const file = e.currentTarget.files[0];
      const videoUploader = new VideoUploader({
        uploadToken,
        file
      });
      videoUploader.onProgress((e2) => {
        onUploadProgress && onUploadProgress(e2);
      });
      const video = await videoUploader.upload();
      onUploadSuccess && onUploadSuccess(video);
    } catch (error) {
      onUploadError && onUploadError((_b2 = error.title) != null ? _b2 : "An error occured during your upload");
    } finally {
      inputRef.current.value = "";
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("button", __spreadProps(__spreadValues({}, props), {
    onClick: handleClick,
    style: __spreadValues({
      background: "#FFFFFF",
      border: "1px solid #000000",
      borderRadius: 3,
      padding: "5px 10px",
      cursor: "pointer"
    }, style)
  }), children), /* @__PURE__ */ React.createElement("input", {
    type: "file",
    hidden: true,
    ref: inputRef,
    onChange: handleUpload
  }));
}
UploadButton.displayName = "Upload button";
export {
  UploadButton
};
